Git trabalha com o versionamento dos arquivos
Git tira snapshots de todos os arquivos em qualquer versão, já os outros sistemas
salvam versões apenas quando há alterações do arquivo 


## Configuração
git config --global user.name "ueiciowr"
git config --global user.email "mwitter@protonmail.com"
git config --global core.editor code

## SSH
ssh-keygen -t rsa -b 4096 -C "mwitter@protonmail.com"
cd .ssh
cat id_rsa.pub
copy and paste for github ssh


## Informação
git config user.name
git config user.email
git config --list
git status
git log
git log --decorate
git log --author="Will"
git shortlog
git shortlog -sn
git log --graph
git show hash  "git log para pegar a hash"
git remote -v (para verificar o repositório atual)

## Mudanças antes de adicionar
git diff
git diff --name-only

##  Restaurar edição de código
git diff
git checkout arquivo "restaurar arquivos em modo de edição"
git reset HEAD arquivo "coloca o arquivo em estado anterior"
git log
git reset --soft hash anterior a nova mudança "sai o commit mas mantém a mudança do arquivo
git reset --mixed hash anterior a nova mudança "reseta o commit e a mudança"
git reset --hard hash anterior a nova mudança "reseta todas as mudanças, inclusive commit"


## Versionamento
echo "# .dotfiles" >> README.md
git init "iniciar o repositório e fazer o controle de versão"
git add README.md
git add -A
git add .
git commit -m "first commit" ─ cria um snapshot, uma versão dos arquivos
git remote add origin https://github.com/bw12r0c/.dotfiles.git
git push -u origin master "empura os arquivos para nuvem"

## Atualizar commits
git pull --rebase origin master
git push origin master
git push
git push -f origin master

## CRIANDO BRANCHS
Bransh serve para trabalhar com os mesmo arquivos porém em lugar isolado
git checkout -b testing
git branch
git checkout testing "muda de branch"
git branch -D testing "deleta o branch"

## Merge e Rebase
git rebase rabase-branch "juntar dois branchs"

## Resetado código para trabalhar depois
git log "copiar a hash"
git revert hash

## TAGS
git tag -a 1.0.0 -m "mensagem"
git push origin master --tags

## APAGAR TAGS E BRANCHS
g tag -d 1.0.0
git push origin master --tags
git push origin :1.0.0


## Estado dos arquivos
Untracked	= arquivo acabou de ser adicionado no repo, mas ainda n foi visto pelo git
Unmodified	= arquvio adicionado ao git, porém não foi modificado
Modified	= arquivo modificado
Staged		= pronto para ser comitado, é o estado dos arquivos, após um commit ele passa a ser unmodified
